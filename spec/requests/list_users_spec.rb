# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/list_users', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # ListUser. As you add validations to ListUser, be sure to
  # adjust the attributes here as well.
  before(:all) do
    @user = FactoryBot.create(:user)
    sign_in @user
  end

  let(:auth_headers) { @user.create_new_auth_token }
  let(:valid_attributes) do
    {
      name: "Salim's list",
      user_id: @user.id
    }
  end

  let(:invalid_attributes) do
    {
      name: 12345,
      slug_id: nil
    }
  end

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # UsersController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) do
    {
      'Uid' => auth_headers['uid'],
      'Access-Token' => auth_headers['access-token'],
      'Client' => auth_headers['client']
    }
  end

  let(:invalid_headers) do
    {
      'Uid' => auth_headers['uid']
    }
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      ListUser.create! valid_attributes
      get '/api/v1/list_users', headers: valid_headers, as: :json
      expect(response).to be_successful
    end

    it 'renders a unauthorized status' do
      ListUser.create! valid_attributes
      get '/api/v1/list_users', headers: invalid_headers, as: :json
      expect(response).to have_http_status(:unauthorized)
    end

    it 'renders a successful response with search ' do
      ListUser.create! valid_attributes
      get "/api/v1/list_users?search=Salim's list",  headers: valid_headers, as: :json
      result =  JSON.parse(response.body)
      expect(result['data'].count).to eq(1)
    end

  end

  describe 'GET /show' do
    it 'renders a successful response' do
      list_user = ListUser.create! valid_attributes
      get "/api/v1/list_users/#{list_user.id}", headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new ListUser' do
        expect do
          post '/api/v1/list_users',
               params: { list_user: valid_attributes }, headers: valid_headers, as: :json
        end.to change(ListUser, :count).by(1)
      end

      it 'renders a JSON response with the new list_user' do
        post '/api/v1/list_users',
             params: { list_user: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new ListUser' do
        expect do
          post '/api/v1/list_users',
               params: { list_user: invalid_attributes }, as: :json
        end.to change(ListUser, :count).by(0)
      end

      it 'renders a JSON response with errors for the new list_user' do
        post '/api/v1/list_users',
             params: { list_user: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq('application/json; charset=utf-8')
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        {
          name: "Omar's list"
        }
      end

      it 'updates the requested list_user' do
        list_user = ListUser.create! valid_attributes
        patch "/api/v1/list_users/#{list_user.id}",
              params: { list_user: new_attributes }, headers: valid_headers, as: :json
        list_user.reload
        expect(list_user.attributes).to include( { "name" => "Omar's list" } )
      end

      it 'renders a JSON response with the list_user' do
        list_user = ListUser.create! valid_attributes
        patch "/api/v1/list_users/#{list_user.id}",
              params: { list_user: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including('application/json'))
      end

    context 'Update list user articles ' do
      let(:medium_valid_attributes) do
        {
          name: 'Elkhabar',
          url_crawling: 'www.elkhabar.com'
        }
      end

      let(:author_valid_attributes) do
        {
          name: 'Mohamed Salim',
        }
      end

      let(:article_valid_attributes) do
        {
          title: 'Campaign Name',
          medium_id: @medium.id,
          author_id: @author.id,
        }
      end
      let(:delete_article)do
      { delete_article_id: @article.id }
      end
      let(:add_article)do
      { article_id: @article.id.to_s }
      end
      it 'delete article from list user articles' do
      
        @medium = Medium.create! medium_valid_attributes
        @author = Author.create! author_valid_attributes
        @article = Article.create! article_valid_attributes
        @list_user = ListUser.create! valid_attributes
        @list_user.articles = Article.where(id: @article.id)
    
        expect do 
        put "/api/v1/list_users/#{@list_user.id}", params: {list_user: delete_article}, headers: valid_headers, as: :json
        
        
       # @list_user.list_articles.reload
       # result = @list_user.list_articles.where(article_id: @article.id).count
       # binding.pry
     
      end.to change(ListUser.first.articles, :count).by(-1)
      end


     
      it 'delete article from list user articles' do
        
        @medium = Medium.create! medium_valid_attributes
        @author = Author.create! author_valid_attributes
        @article = Article.create! article_valid_attributes
        list_user = ListUser.create! valid_attributes
        # list_user.articles = Article.where(id: @article.id)
   
         
        expect do
          put "/api/v1/list_users/#{list_user.id}", params: {list_user: add_article}, headers: valid_headers, as: :json
        end.to  change(ListUser.first.articles, :count).by(1)
      end

    end

    end

    context 'with invalid parameters' do
      it 'renders a JSON response with errors for the list_user' do
        list_user = ListUser.create! valid_attributes
        patch "/api/v1/list_users/#{list_user.id}",
              params: { list_user: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq('application/json; charset=utf-8')
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested list_user' do
      list_user = ListUser.create! valid_attributes
      expect do
        delete "/api/v1/list_users/#{list_user.id}", headers: valid_headers, as: :json
      end.to change(ListUser, :count).by(-1)
    end
  end
end
