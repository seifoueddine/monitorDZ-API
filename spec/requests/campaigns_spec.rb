# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/campaigns', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Campaign. As you add validations to Campaign, be sure to
  # adjust the attributes here as well.
  before(:all) do
    @user = FactoryBot.create(:user)
    sign_in @user
  end
  let(:auth_headers) { @user.create_new_auth_token }

  let(:valid_attributes) do
      {
        name: 'Campaign one',
        slug_id: @user.slug_id
      }
  end

  let(:invalid_attributes) do
    {
      name: 321
    }
  end

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # CampaignsController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) do
    {
      'Uid' => auth_headers['uid'],
      'Access-Token' => auth_headers['access-token'],
      'Client' => auth_headers['client'],
      'slug-id' => @user.slug_id
    }
  end
  let(:invalid_headers) do
    {
      'Uid' => auth_headers['uid']
    }
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      Campaign.create! valid_attributes
      get '/api/v1/campaigns', headers: valid_headers, as: :json
      expect(response).to be_successful
    end

    it 'renders a unauthorized status' do
      Campaign.create! valid_attributes
      get '/api/v1/campaigns', headers: invalid_headers, as: :json
      expect(response).to have_http_status(:unauthorized)
    end



    it 'renders a successful response with search ' do
      Campaign.create! valid_attributes
      get '/api/v1/campaigns?search=Campaign one',  headers: valid_headers, as: :json
      result =  JSON.parse(response.body)
      expect(result['data'].count).to eq(1)
    end

  end

  describe 'GET /show' do
    it 'renders a successful response' do
      campaign = Campaign.create! valid_attributes
      get "/api/v1/campaigns/#{campaign.id}", headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Campaign' do
        expect do
          post '/api/v1/campaigns',
               params: { campaign: valid_attributes }, headers: valid_headers, as: :json
        end.to change(Campaign, :count).by(1)
      end


      let(:medium_valid_attributes) do
        {
          name: 'Elkhabar',
          url_crawling: 'www.elkhabar.com'
        }
      end

      let(:medium_valid_attributes2) do
        {
          name: 'Elkhabar2',
          url_crawling: 'www.elkhabar.com'
        }
      end

      let(:valid_attributes_with_medium) do
        {
          name: 'Campaign one',
          slug_id: @user.slug_id,
          media_id: "#{@medium.id.to_s},#{@medium2.id.to_s}",
        }
      end

      let(:tag_valid_attributes) do
        {
          name: 'tag 1'
        }
      end

      let(:valid_attributes_with_tag) do
        {
          name: 'Campaign one',
          slug_id: @user.slug_id,
          tag_id: @tag.id.to_s,
        }
      end

      it 'creates a new Campaign with medium params' do
        @medium = Medium.create! medium_valid_attributes
        @medium2 = Medium.create! medium_valid_attributes2
          post '/api/v1/campaigns',
               params: { campaign: valid_attributes_with_medium }, headers: valid_headers, as: :json
        expect(Campaign.first.media.count).to eq(2)
      end


      it 'creates a new Campaign with tags params' do
        @tag = Tag.create! tag_valid_attributes
   
        #binding.pry
          post '/api/v1/campaigns',
               params: { campaign: valid_attributes_with_tag }, headers: valid_headers, as: :json
          expect(Campaign.first.tags.count).to eq(1)
        # result =  JSON.parse(response.body)
      end



      it 'renders a JSON response with the new campaign' do
        post '/api/v1/campaigns',
             params: { campaign: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Campaign' do
        expect do
          post '/api/v1/campaigns',
               params: { campaign: invalid_attributes }, as: :json
        end.to change(Campaign, :count).by(0)
      end

      it 'renders a JSON response with errors for the new campaign' do
        post '/api/v1/campaigns',
             params: { campaign: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq('application/json; charset=utf-8')
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        {
          name: 'Campaign edit name'
        }
      end

      it 'updates the requested campaign' do
        campaign = Campaign.create! valid_attributes
        patch "/api/v1/campaigns/#{campaign.id}",
              params: { campaign: new_attributes }, headers: valid_headers, as: :json
        campaign.reload
        expect(campaign.attributes).to include( { "name" => 'Campaign edit name' } )
      end

      let(:medium_valid_attributes) do
        {
          name: 'Elkhabar',
          url_crawling: 'www.elkhabar.com'
        }
      end

      let(:valid_attributes_with_medium) do
        {
          name: 'Campaign one',
          slug_id: @user.slug_id,
          media_id: @medium.id.to_s,
        }
      end

      let(:tag_valid_attributes) do
        {
          name: 'tag 1'
        }
      end

      let(:valid_attributes_with_tag) do
        {
          name: 'Campaign one',
          slug_id: @user.slug_id,
          tag_id: @tag.id.to_s,
        }
      end


      it 'updates the requested campaign with new medium' do
        @medium = Medium.create! medium_valid_attributes
        campaign = Campaign.create! valid_attributes
        patch "/api/v1/campaigns/#{campaign.id}",
              params: { campaign: valid_attributes_with_medium }, headers: valid_headers, as: :json
        campaign.reload
        expect(Campaign.first.media.count).to eq(1)
      end


      it 'updates the requested campaign with new tag' do
        @tag = Tag.create! tag_valid_attributes
        campaign = Campaign.create! valid_attributes
        patch "/api/v1/campaigns/#{campaign.id}",
              params: { campaign: valid_attributes_with_tag }, headers: valid_headers, as: :json
        campaign.reload
        expect(Campaign.first.tags.count).to eq(1)
      end

      it 'renders a JSON response with the campaign' do
        campaign = Campaign.create! valid_attributes
        patch "/api/v1/campaigns/#{campaign.id}",
              params: { campaign: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end

    context 'with invalid parameters' do
      it 'renders a JSON response with errors for the campaign' do
        campaign = Campaign.create! valid_attributes
        patch "/api/v1/campaigns/#{campaign.id}",
              params: { campaign: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq('application/json; charset=utf-8')
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested campaign' do
      campaign = Campaign.create! valid_attributes
      expect do
        delete "/api/v1/campaigns/#{campaign.id}", headers: valid_headers, as: :json
      end.to change(Campaign, :count).by(-1)
    end
  end
end
